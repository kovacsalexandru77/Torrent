kotlin
package itorrent

import com.lagradost.cloudstream3.*
import com.lagradost.cloudstream3.utils.*

class ItorrentMagnet : MainAPI() {
    override var mainUrl = "https://itorrent.ws"
    override var name = "iTorrent Magnet"
    override val hasMainPage = true
    override val hasQuickSearch = false
    override val supportedTypes = setOf(TvType.Movie)

    override suspend fun getMainPage(page: Int, request: MainPageRequest): HomePageResponse {
        val doc = app.get(mainUrl).document
        val movies = doc.select(".movies-list .ml-item").mapNotNull {
            val href = it.selectFirst("a")?.attr("href") ?: return@mapNotNull null
            val title = it.selectFirst("a")?.attr("title") ?: "Névtelen"
            val poster = it.selectFirst("img")?.attr("data-original")
            newMovieSearchResponse(title, href) {
                this.posterUrl = poster?.takeIf { isValidImageUrl(it) } ?: "default_poster_url.jpg" // Default poster if invalid
            }
        }
        return newHomePageResponse(listOf(HomePageList("Magyar filmek", movies)))
    }

    override suspend fun load(url: String): LoadResponse {
        val doc = app.get(url).document
        val title = doc.selectFirst("title")?.text() ?: "Film"
        val magnet = doc.select("a[href^=magnet:]").firstOrNull()?.attr("href")
            ?: throw ErrorLoadingException("Nincs magnet link a megadott filmen.")

        // Optional: Kiegészítő információk kinyerése
        val description = doc.select("description_selector").firstOrNull()?.text() ?: "Nincs leírás elérhető."
        
        return newMovieLoadResponse(title, url, TvType.Movie, listOf(ExtractorLink("iTorrent", "Magnet", magnet, description, Qualities.Unknown)))
    }

    private fun isValidImageUrl(url: String): Boolean {
        // Egyszerű ellenőrzés a kép URL validálására
        return url.endsWith(".jpg")  url.endsWith(".png")  url.endsWith(".jpeg")
    }
}
